import edu.wpi.first.vision.VisionPipeline;
import java.util.ArrayList;
import java.util.List;
import org.opencv.core.*;
import org.opencv.imgproc.*;

/**
 * WristCamPipeline class.
 *
 * <p>An OpenCV pipeline generated by GRIP.
 *
 * @author GRIP
 */
public class WristCamPipeline implements VisionPipeline {
  // Input
  private Mat originalImage = new Mat();
  // Outputs
  private Mat hsvThresholdOutput = new Mat();
  private Mat blurOutput = new Mat();
  private ArrayList<MatOfPoint> findContoursOutput = new ArrayList<MatOfPoint>();
  private ArrayList<MatOfPoint> convexHullsOutput = new ArrayList<MatOfPoint>();

  static {
    System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
  }

  /** This is the primary method that runs the entire pipeline and updates the outputs. */
  @Override
  public void process(Mat source0) {
    originalImage = source0;
    // Step HSV_Threshold0:
    Mat hsvThresholdInput = source0;
    double[] hsvThresholdHue = {0.0, 50.98976109215017};
		double[] hsvThresholdSaturation = {116.95143884892084, 255.0};
		double[] hsvThresholdValue = {0.0, 255.0};
    hsvThreshold(
        hsvThresholdInput,
        hsvThresholdHue,
        hsvThresholdSaturation,
        hsvThresholdValue,
        hsvThresholdOutput);

    // Step Blur0:
    Mat blurInput = hsvThresholdOutput;
    BlurType blurType = BlurType.get("Median Filter");
    double blurRadius = 20.72072072072072;
    blur(blurInput, blurType, blurRadius, blurOutput);

    // Step Find_Contours0:
    Mat findContoursInput = blurOutput;
    boolean findContoursExternalOnly = true;
    findContours(findContoursInput, findContoursExternalOnly, findContoursOutput);

    // Step Convex_Hulls0:
    ArrayList<MatOfPoint> convexHullsContours = findContoursOutput;
    convexHulls(convexHullsContours, convexHullsOutput);
  }

  /**
   * This method is a generated getter for the output of a originalImage.
   *
   * @return Mat output from originalImage.
   */
  public Mat getOriginalImage() {
    return originalImage;
  }

  /**
   * This method is a generated getter for the output of a HSV_Threshold.
   *
   * @return Mat output from HSV_Threshold.
   */
  public Mat hsvThresholdOutput() {
    return hsvThresholdOutput;
  }

  /**
   * This method is a generated getter for the output of a Blur.
   *
   * @return Mat output from Blur.
   */
  public Mat blurOutput() {
    return blurOutput;
  }

  /**
   * This method is a generated getter for the output of a Find_Contours.
   *
   * @return ArrayList<MatOfPoint> output from Find_Contours.
   */
  public ArrayList<MatOfPoint> findContoursOutput() {
    return findContoursOutput;
  }

  /**
   * This method is a generated getter for the output of a Convex_Hulls.
   *
   * @return ArrayList<MatOfPoint> output from Convex_Hulls.
   */
  public ArrayList<MatOfPoint> convexHullsOutput() {
    return convexHullsOutput;
  }

  /**
   * Segment an image based on hue, saturation, and value ranges.
   *
   * @param input The image on which to perform the HSL threshold.
   * @param hue The min and max hue
   * @param sat The min and max saturation
   * @param val The min and max value
   * @param output The image in which to store the output.
   */
  private void hsvThreshold(Mat input, double[] hue, double[] sat, double[] val, Mat out) {
    Imgproc.cvtColor(input, out, Imgproc.COLOR_BGR2HSV);
    Core.inRange(out, new Scalar(hue[0], sat[0], val[0]), new Scalar(hue[1], sat[1], val[1]), out);
  }

  /**
   * An indication of which type of filter to use for a blur. Choices are BOX, GAUSSIAN, MEDIAN, and
   * BILATERAL
   */
  enum BlurType {
    BOX("Box Blur"),
    GAUSSIAN("Gaussian Blur"),
    MEDIAN("Median Filter"),
    BILATERAL("Bilateral Filter");

    private final String label;

    BlurType(String label) {
      this.label = label;
    }

    public static BlurType get(String type) {
      if (BILATERAL.label.equals(type)) {
        return BILATERAL;
      } else if (GAUSSIAN.label.equals(type)) {
        return GAUSSIAN;
      } else if (MEDIAN.label.equals(type)) {
        return MEDIAN;
      } else {
        return BOX;
      }
    }

    @Override
    public String toString() {
      return this.label;
    }
  }

  /**
   * Softens an image using one of several filters.
   *
   * @param input The image on which to perform the blur.
   * @param type The blurType to perform.
   * @param doubleRadius The radius for the blur.
   * @param output The image in which to store the output.
   */
  private void blur(Mat input, BlurType type, double doubleRadius, Mat output) {
    int radius = (int) (doubleRadius + 0.5);
    int kernelSize;
    switch (type) {
      case BOX:
        kernelSize = 2 * radius + 1;
        Imgproc.blur(input, output, new Size(kernelSize, kernelSize));
        break;
      case GAUSSIAN:
        kernelSize = 6 * radius + 1;
        Imgproc.GaussianBlur(input, output, new Size(kernelSize, kernelSize), radius);
        break;
      case MEDIAN:
        kernelSize = 2 * radius + 1;
        Imgproc.medianBlur(input, output, kernelSize);
        break;
      case BILATERAL:
        Imgproc.bilateralFilter(input, output, -1, radius, radius);
        break;
    }
  }

  /**
   * Sets the values of pixels in a binary image to their distance to the nearest black pixel.
   *
   * @param input The image on which to perform the Distance Transform.
   * @param type The Transform.
   * @param maskSize the size of the mask.
   * @param output The image in which to store the output.
   */
  private void findContours(Mat input, boolean externalOnly, List<MatOfPoint> contours) {
    Mat hierarchy = new Mat();
    contours.clear();
    int mode;
    if (externalOnly) {
      mode = Imgproc.RETR_EXTERNAL;
    } else {
      mode = Imgproc.RETR_LIST;
    }
    int method = Imgproc.CHAIN_APPROX_SIMPLE;
    Imgproc.findContours(input, contours, hierarchy, mode, method);
  }

  /**
   * Compute the convex hulls of contours.
   *
   * @param inputContours The contours on which to perform the operation.
   * @param outputContours The contours where the output will be stored.
   */
  private void convexHulls(List<MatOfPoint> inputContours, ArrayList<MatOfPoint> outputContours) {
    final MatOfInt hull = new MatOfInt();
    outputContours.clear();
    for (int i = 0; i < inputContours.size(); i++) {
      final MatOfPoint contour = inputContours.get(i);
      final MatOfPoint mopHull = new MatOfPoint();
      Imgproc.convexHull(contour, hull);
      mopHull.create((int) hull.size().height, 1, CvType.CV_32SC2);
      for (int j = 0; j < hull.size().height; j++) {
        int index = (int) hull.get(j, 0)[0];
        double[] point = new double[] {contour.get(index, 0)[0], contour.get(index, 0)[1]};
        mopHull.put(j, 0, point);
      }
      outputContours.add(mopHull);
    }
  }
}
